name: BookRecommender Proto - Deploy API

on:
  workflow_run:
    workflows: ["BookRecommender Proto - Build API", "BookRecommender Proto - Deploy UI"]
    types: [completed]
    branches: [main, master]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bookrecommender-api
  AZURE_CONTAINER_APP_NAME: bookrecommender-api
  AZURE_RESOURCE_GROUP: rg-bookrecommender-proto

jobs:
  deploy-to-azure:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.BOOKRECOMMENDER_PROTO_AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.BOOKRECOMMENDER_PROTO_AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.BOOKRECOMMENDER_PROTO_AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure Container Apps
      run: |
        # Use the latest image built from the build workflow
        IMAGE_TAG="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"
        
        # Get Static Web App URL for CORS configuration
        echo "Detecting Static Web App URL for CORS configuration..."
        
        # First, try to get the Static Web App hostname using the same approach as UI deployment
        SWA_HOSTNAME=$(az staticwebapp show --name swa-bookrecommender-ui --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "defaultHostname" --output tsv 2>/dev/null)
        
        if [ $? -eq 0 ] && [ ! -z "$SWA_HOSTNAME" ] && [ "$SWA_HOSTNAME" != "null" ] && [[ "$SWA_HOSTNAME" != *"ERROR"* ]]; then
          SWA_URL="https://$SWA_HOSTNAME"
          echo "Found Static Web App URL: $SWA_URL"
        else
          echo "Primary detection failed, trying alternative approach..."
          # Fallback: try listing all static web apps and find ours
          SWA_HOSTNAME=$(az staticwebapp list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[?name=='swa-bookrecommender-ui'].defaultHostname | [0]" --output tsv 2>/dev/null)
          
          if [ $? -eq 0 ] && [ ! -z "$SWA_HOSTNAME" ] && [ "$SWA_HOSTNAME" != "null" ]; then
            SWA_URL="https://$SWA_HOSTNAME"
            echo "Found Static Web App URL via fallback: $SWA_URL"
          else
            SWA_URL=""
            echo "Could not detect Static Web App URL. CORS will only allow localhost origins."
            echo "This might be a permissions issue with the service principal."
          fi
        fi
        
        # Set CORS origins - include Static Web App URL if found
        if [ ! -z "$SWA_URL" ]; then
          CORS_ORIGINS="${SWA_URL};https://localhost:4200;http://localhost:4200"
        else
          CORS_ORIGINS="https://localhost:4200;http://localhost:4200"
        fi
        echo "CORS Origins: $CORS_ORIGINS"
        
        # Update the container app with the new image, CORS configuration, and PostgreSQL connection
        az containerapp update \
          --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars "CORS__AllowedOrigins=$CORS_ORIGINS" "ConnectionStrings__DefaultConnection=${{ secrets.BOOKRECOMMENDER_PROTO_POSTGRES_CONNECTION_STRING }}" "ASPNETCORE_ENVIRONMENT=Production"

    - name: Verify deployment
      run: |
        # Get the FQDN of the container app
        FQDN=$(az containerapp show \
          --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "API deployed to: https://$FQDN"
        
        # Test the health endpoint
        curl -f "https://$FQDN/api/health" || exit 1
        echo "Health check passed!"
