name: BookRecommender API CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'BookRecommender/backend/**'
      - '.github/workflows/bookrecommender-api.yml'
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
  RG: ${{ secrets.AZURE_RG }}
  WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  IMAGE_NAME: bookrecommenderapi
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AZURE_WEBAPP_MI_PRINCIPAL_ID: ${{ secrets.AZURE_WEBAPP_MI_PRINCIPAL_ID }}
  # Set context to the app’s top folder so subsequent paths can be short
  CONTEXT: BookRecommender
  DOCKERFILE: BookRecommender/backend/BookRecommenderApi/Dockerfile
  TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Login to Azure using OIDC (recommended approach)
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debug ACR name
        id: acr_dbg
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ env.ACR_NAME }}"
          echo "RAW env.ACR_NAME -> '${RAW}'"

          # Normalize (handles 'myregistry.azurecr.io' or accidental URL paste)
          NAME="$RAW"
          NAME="${NAME#https://}"
          NAME="${NAME#http://}"
          NAME="${NAME%%.azurecr.io}"
          NAME="$(echo "$NAME" | tr '[:upper:]' '[:lower:]')"

          echo "Normalized -> '${NAME}'"
          echo "Length -> ${#NAME}"
          printf "ASCII codes -> "; echo -n "$NAME" | od -An -t u1

          # Validate format: 5–50 lowercase letters/digits only
          if [[ ! "$NAME" =~ ^[a-z0-9]{5,50}$ ]]; then
            echo "::error::ACR name invalid. It must be the short name (e.g. 'myregistry'), NOT 'myregistry.azurecr.io'."
            exit 1
          fi

          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "loginServer=${NAME}.azurecr.io" >> "$GITHUB_OUTPUT"

      - name: Try ACR show (permission check)
        shell: bash
        run: |
          set -e
          az acr show -n "${{ steps.acr_dbg.outputs.name }}" -o table || {
            echo "::error::'az acr show' failed. This usually means the service principal lacks access (needs AcrPush/Contributor on the ACR or its RG)."
            exit 1
          }

      - name: ACR login
        run: az acr login --name ${{ steps.acr_dbg.outputs.name }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.acr_dbg.outputs.loginServer }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          build-args: |
            PROJECT_PATH=backend/BookRecommenderApi

      # Ensure the CLI is on the subscription from the login JSON
      - name: Ensure correct subscription context
        run: |
          set -e
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account show -o table
          
          # Wait a bit for RBAC propagation (in case permissions were just granted)
          echo "Waiting 30 seconds for RBAC propagation..."
          sleep 30

      # Point Web App to image using direct resource updates (avoids config read permissions)
      - name: Configure container image (MI)
        run: |
          set -e

          # Get the Web App resource ID
          WEBAPP_ID=$(az webapp show -g $RG -n $WEBAPP_NAME --query id -o tsv)
          
          # A) Set container image and enable managed identity for ACR in one operation
          az resource update --ids "$WEBAPP_ID" --set \
            properties.siteConfig.linuxFxVersion="DOCKER|${{ steps.acr_dbg.outputs.loginServer }}/${IMAGE_NAME}:${TAG}" \
            properties.siteConfig.acrUseManagedIdentityCreds=true \
            properties.siteConfig.alwaysOn=true

      - name: (Optional) Set OpenAI key as app setting
        if: ${{ env.OPENAI_API_KEY != '' }}
        run: |
          az webapp config appsettings set -g $RG -n $WEBAPP_NAME --settings OpenAI__ApiKey=${{ secrets.OPENAI_API_KEY }}

      - name: Restart Web App
        run: az webapp restart -g $RG -n $WEBAPP_NAME
